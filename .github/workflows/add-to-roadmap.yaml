name: Add roadmap issues to user Project (v2)

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue:
        description: Issue number to add manually
        required: false

# Minimal permissions for the built-in GITHUB_TOKEN used in read/comment steps
permissions:
  contents: read
  issues: read

jobs:
  add-to-project:
    # Run if "roadmap" label added OR manual dispatch provided an issue #
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'roadmap')) ||
      (github.event_name == 'workflow_dispatch' && inputs.issue != '')
    runs-on: ubuntu-latest

    env:
      # ðŸ”§ Change these to YOUR setup
      USER_LOGIN: yizha1          # the project owner (your GitHub username)
      PROJECT_NUMBER: "3"         # the visible number in the Project URL
      TARGET_STATUS: Todo         # optional: Status option to set (must exist)

    steps:
      - name: Resolve ProjectV2 node ID from number
        id: proj
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}   # PAT with Projects:RW
          script: |
            const login  = process.env.USER_LOGIN;
            const number = parseInt(process.env.PROJECT_NUMBER, 10);

            const query = `
              query($login:String!, $number:Int!) {
                user(login:$login) {
                  projectV2(number:$number) { id title }
                }
              }`;

            const resp = await github.graphql(query, { login, number });
            const project = resp?.user?.projectV2;
            if (!project?.id) core.setFailed(`Could not find ProjectV2 for user=${login} number=${number}`);
            core.setOutput('project_id', project.id);
            core.info(`Project resolved: ${project.title} (${project.id})`);

      - name: Resolve issue node ID
        id: issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}      # built-in token OK for reading issues
          script: |
            let issueNumber = (context.eventName === 'workflow_dispatch')
              ? parseInt(core.getInput('issue'), 10)
              : context.payload.issue.number;

            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            core.setOutput('number', String(issueNumber));
            core.setOutput('node_id', issue.node_id);

      - name: Add item to Project V2
        id: add
        uses: actions/github-script@v7
        env:
          PROJECT_ID: ${{ steps.proj.outputs.project_id }}
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}     # PAT with Projects:RW
          script: |
            const projectId   = process.env.PROJECT_ID;
            const issueNodeId = "${{ steps.issue.outputs.node_id }}";

            const mutation = `
              mutation($project:ID!, $content:ID!) {
                addProjectV2ItemById(input:{ projectId:$project, contentId:$content }) {
                  item { id }
                }
              }`;

            try {
              const result = await github.graphql(mutation, { project: projectId, content: issueNodeId });
              const itemId = result?.addProjectV2ItemById?.item?.id;
              if (!itemId) core.setFailed('Project item was not returned.');
              core.setOutput('item_id', itemId);
              core.info(`Added project item: ${itemId}`);
            } catch (e) {
              core.setFailed(`Failed to add to Project: ${e.message}`);
            }

      - name: Set Status field (optional)
        if: steps.add.outputs.item_id != '' && env.TARGET_STATUS != ''
        uses: actions/github-script@v7
        env:
          PROJECT_ID: ${{ steps.proj.outputs.project_id }}
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}     # PAT with Projects:RW
          script: |
            const projectId   = process.env.PROJECT_ID;
            const itemId      = "${{ steps.add.outputs.item_id }}";
            const targetLabel = process.env.TARGET_STATUS;

            // 1) Fetch fields; find 'Status' + option id
            const fieldsQuery = `
