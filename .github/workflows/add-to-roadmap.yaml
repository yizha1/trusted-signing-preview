name: Add roadmap issues to yizha1roadmap project

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue:
        description: Issue number to add manually
        required: false

permissions:
  contents: read
  issues: read

jobs:
  add-to-project:
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'roadmap')) ||
      (github.event_name == 'workflow_dispatch' && inputs.issue != '')
    runs-on: ubuntu-latest

    env:
      # CHANGE these two to your setup; this avoids hardcoding the PVT_ id
      USER_LOGIN: yizha1          # your GitHub username (project owner)
      PROJECT_NUMBER: "1"         # the visible project number in the URL
      TARGET_STATUS: Todo         # optional: status option to set after adding

    steps:
      - name: Resolve ProjectV2 node ID from number
        id: proj
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}   # PAT with Projects:RW
          script: |
            const login = process.env.USER_LOGIN;
            const number = parseInt(process.env.PROJECT_NUMBER, 10);
            const query = `
              query($login:String!, $number:Int!) {
                user(login:$login) {
                  projectV2(number:$number) { id title }
                }
              }`;
            const resp = await github.graphql(query, { login, number });
            const id = resp?.user?.projectV2?.id;
            if (!id) core.setFailed(`Could not find ProjectV2 for user=${login} number=${number}`);
            core.setOutput('project_id', id);
            core.info(`Project resolved: ${resp.user.projectV2.title} (${id})`);

      - name: Resolve issue node ID
        id: issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let issueNumber = (context.eventName === 'workflow_dispatch')
              ? parseInt(core.getInput('issue'), 10)
              : context.payload.issue.number;
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            core.setOutput('number', String(issueNumber));
            core.setOutput('node_id', issue.node_id);

      - name: Add item to Project V2
        id: add
        uses: actions/github-script@v7
        env:
          PROJECT_ID: ${{ steps.proj.outputs.project_id }}
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}  # PAT with Projects:RW
          script: |
            const projectId = process.env.PROJECT_ID;
            const issueNodeId = "${{ steps.issue.outputs.node_id }}";
            const mutation = `
              mutation($project:ID!, $content:ID!) {
                addProjectV2ItemById(input:{ projectId:$project, contentId:$content }) {
                  item { id }
                }
              }`;
            const result = await github.graphql(mutation, { project: projectId, content: issueNodeId });
            core.setOutput('item_id', result.addProjectV2ItemById.item.id);
            core.info(`Added item: ${JSON.stringify(result)}`);

      - name: Set Status field (optional)
        if: steps.add.outputs.item_id != '' && env.TARGET_STATUS != ''
        uses: actions/github-script@v7
        env:
          PROJECT_ID: ${{ steps.proj.outputs.project_id }}
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}  # same PAT
          script: |
            const projectId = process.env.PROJECT_ID;
            const itemId = "${{ steps.add.outputs.item_id }}";
            const targetStatus = process.env.TARGET_STATUS;

            // 1) Fetch fields and find 'Status' + option id
            const fieldsQuery = `
              query($project:ID!) {
                node(id:$project) {
                  ... on ProjectV2 {
                    fields(first:50) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id name options { id name }
                        }
                      }
                    }
                  }
                }
              }`;
            const f = await github.graphql(fieldsQuery, { project: projectId });
            const statusField = f.node.fields.nodes.find(n => n?.name === 'Status' && n?.options);
            if (!statusField) {
              core.info('No Status field found; skipping.');
              return;
            }
            const opt = statusField.options.find(o => o.name === targetStatus);
            if (!opt) {
              core.info(`Status '${targetStatus}' not found. Options: ${statusField.options.map(o=>o.name).join(', ')}`);
              return;
            }

            // 2) Update Status
            const updateMutation = `
              mutation($project:ID!, $item:ID!, $field:ID!, $option:String!) {
                updateProjectV2ItemFieldValue(
                  input:{
                    projectId:$project,
                    itemId:$item,
                    fieldId:$field,
                    value:{ singleSelectOptionId:$option }
                  }
                ) { projectV2Item { id } }
              }`;
            await github.graphql(updateMutation, {
              project: projectId, item: itemId, field: statusField.id, option: opt.id
            });
            core.info(`Status set to '${targetStatus}'.`);

      - name: Comment confirmation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          PROJECT_ID: ${{ steps.proj.outputs.project_id }}
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: parseInt("${{ steps.issue.outputs.number }}", 10),
            body: `âœ… Added to Project (ID: ${process.env.PROJECT_ID})` +
                  (process.env.TARGET_STATUS ? `, Status: **${process.env.TARGET_STATUS}**.` : '.')
          })
